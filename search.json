[
  {
    "objectID": "content/01_journal/03_data_wrangling.html",
    "href": "content/01_journal/03_data_wrangling.html",
    "title": "Data Wrangling",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh."
  },
  {
    "objectID": "content/01_journal/02_data_acquisition.html",
    "href": "content/01_journal/02_data_acquisition.html",
    "title": "Data Acquisition",
    "section": "",
    "text": "1 Challenge 1 - Get Data via API\nFor the first challenge I got weather forecast data for Killer, Baden-Württemberg from the DWD.\n\nlibrary(tidyverse)\n\n#> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#> ✔ dplyr     1.1.2     ✔ readr     2.1.4\n#> ✔ forcats   1.0.0     ✔ stringr   1.5.0\n#> ✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n#> ✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n#> ✔ purrr     1.0.1     \n#> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#> ✖ dplyr::filter() masks stats::filter()\n#> ✖ dplyr::lag()    masks stats::lag()\n#> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\nlibrary(httr)\nlibrary(jsonlite)\n\n#> \n#> Attache Paket: 'jsonlite'\n#> \n#> Das folgende Objekt ist maskiert 'package:purrr':\n#> \n#>     flatten\n\nresp <- GET('https://dwd.api.proxy.bund.dev/v30/stationOverviewExtended?stationIds=10865')\n\nforecast_list <- resp %>% \n  .$content %>% \n  rawToChar() %>% \n  fromJSON()\n\nforecast_tbl <- forecast_list[[\"10865\"]][[\"days\"]]\n\nforecast_tbl\n\n\n\n  \n\n\n\n\n2 Challenge 2 - Scrape Website\nFor the second challenge I scraped the name and the price of the bikes in the mtb category on the rosebikes.de website.\n\n# WEBSCRAPING ----\n\n# 1.0 LIBRARIES ----\n\nlibrary(tidyverse) # Main Package - Loads dplyr, purrr, etc.\nlibrary(rvest)     # HTML Hacking & Web Scraping\n\n#> \n#> Attache Paket: 'rvest'\n\n\n#> Das folgende Objekt ist maskiert 'package:readr':\n#> \n#>     guess_encoding\n\nlibrary(xopen)     # Quickly opening URLs\nlibrary(jsonlite)  # converts JSON files to R objects\nlibrary(glue)      # concatenate strings\nlibrary(stringi)   # character string/text processing\n\n# 1.1 COLLECT PRODUCT FAMILIES ----\n\nurl_home          <- \"https://www.rosebikes.de/fahrr%C3%A4der/mtb\"\n\n# Read in the HTML for the entire webpage\nhtml_home         <- read_html(url_home)\n\n# Web scrape the bike names\nbike_name_tbl <- html_home %>%\n  \n  # Get the nodes for the families ...\n  html_nodes(css = \".catalog-category-bikes__content\") %>%\n  # ...and extract the information of the id attribute\n  \n  html_nodes(css = \".basic-headline__title\") %>%\n  \n  html_text() %>%\n  \n  # Convert vector to tibble\n  enframe(name = \"position\", value = \"bike_name\") #%>%\n\n# Web scrape the bike price\nbike_price_tbl <- html_home %>%\n  \n  # Get the nodes for the families ...\n  html_nodes(css = \".catalog-category-bikes__content\") %>%\n  # ...and extract the information of the id attribute\n  \n  html_nodes(css = \".catalog-category-bikes__price-title\") %>%\n  \n  html_text() %>%\n  \n  # Convert vector to tibble\n  enframe(name = \"position\", value = \"bike_price_text\") %>%\n  \n  mutate(bike_price_text = gsub('\\n                                                ab ', '', bike_price_text)) %>%\n  \n  mutate(bike_price_text = gsub('\\n                                            ', '', bike_price_text))\n\n  \n\nbike_tbl <- left_join(bike_name_tbl, bike_price_tbl)\n\n#> Joining with `by = join_by(position)`\n\nbike_tbl"
  },
  {
    "objectID": "content/01_journal/04_data_visualization.html",
    "href": "content/01_journal/04_data_visualization.html",
    "title": "Data Visualization",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh."
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html",
    "href": "content/01_journal/01_tidyverse.html",
    "title": "Tidyverse",
    "section": "",
    "text": "What follows are my results for the challenge in the chapter “Intro to the tidyverse”\n\n1 Source Code and Results\n\n# Data Science at TUHH ------------------------------------------------------\n# SALES ANALYSIS ----\n\n# 1.0 Load libraries ----\nlibrary(\"tidyverse\")\n\n#> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#> ✔ dplyr     1.1.2     ✔ readr     2.1.4\n#> ✔ forcats   1.0.0     ✔ stringr   1.5.0\n#> ✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n#> ✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n#> ✔ purrr     1.0.1     \n#> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#> ✖ dplyr::filter() masks stats::filter()\n#> ✖ dplyr::lag()    masks stats::lag()\n#> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\nlibrary(\"readxl\")\n\n\n# 2.0 Importing Files ----\nbikes_tbl <- read_excel(\n  \"/home/andi/Dokumente/Uni/Business Data Science Basics/ds_data/01_bike_sales/01_raw_data/bikes.xlsx\"\n)\nbikeshops_tbl <- read_excel(\n  \"/home/andi/Dokumente/Uni/Business Data Science Basics/ds_data/01_bike_sales/01_raw_data/bikeshops.xlsx\"\n)\norderlines_tbl <- read_excel(\n  \"/home/andi/Dokumente/Uni/Business Data Science Basics/ds_data/01_bike_sales/01_raw_data/orderlines.xlsx\"\n)\n\n#> New names:\n#> • `` -> `...1`\n\n# 3.0 Examining Data ----\n\n\n# 4.0 Joining Data ----\nbike_orderlines_joined_tbl <- orderlines_tbl %>%\n  left_join(bikes_tbl, by = c(\"product.id\" = \"bike.id\")) %>%\n  left_join(bikeshops_tbl, by = c(\"customer.id\" = \"bikeshop.id\"))\n\n# 5.0 Wrangling Data ----\nbike_orderlines_wrangled_tbl <- bike_orderlines_joined_tbl %>%\n  # 5.1 Separate location\n  separate(col    = location,\n           into   = c(\"city\", \"state\"),\n           sep    = \", \") %>%\n  \n  # 5.2 Add the total price (price * quantity) \n  # Add a column to a tibble that uses a formula-style calculation of other columns\n  mutate(total.price = price * quantity) %>%\n  \n  # 5.3 Reorganize. Using select to grab or remove unnecessary columns\n  # 5.3.1 by exact column name\n  select(-...1, -gender, -customer.id, -product.id) %>%\n  \n  # 5.3.2 Reorder the data by selecting the columns in your desired order.\n  # You can use select_helpers like contains() or everything()\n  select(order.id, contains(\"order\"), contains(\"model\"), contains(\"category\"),\n         price, quantity, total.price,\n         everything()) %>%\n  \n  # 5.4 Rename columns because we actually wanted underscores instead of the dots\n  # (one at the time vs. multiple at once)\n  rename(bikeshop = name) %>%\n  set_names(names(.) %>% str_replace_all(\"\\\\.\", \"_\"))\n\n# 6.0 Business Insights ----\n# 6.1 Sales by State ----\n\nlibrary(lubridate)\n# Step 1 - Manipulate\nsales_by_state_tbl <- bike_orderlines_wrangled_tbl %>%\n  \n  # Select columns\n  select(state, total_price) %>%\n  \n  # Grouping by state and summarizing sales\n  group_by(state) %>% \n  summarize(sales = sum(total_price)) %>%\n  \n  # Add a column that turns the numbers into a currency format \n  # (makes it in the plot optically more appealing)\n  # mutate(sales_text = scales::dollar(sales)) <- Works for dollar values\n  mutate(sales_text = scales::dollar(sales, big.mark = \".\", \n                                     decimal.mark = \",\", \n                                     prefix = \"\", \n                                     suffix = \" €\"))\n\n# Step 2 - Visualize\nsales_by_state_tbl %>%\n  \n  # Setup canvas with the columns state (x-axis) and sales (y-axis)\n  ggplot(aes(x = state, y = sales)) +\n  \n  # Geometries\n  geom_col(fill = \"#2DC6D6\") + # Use geom_col for a bar plot\n  geom_label(aes(label = sales_text)) + # Adding labels to the bars\n  \n  # Formatting\n  # scale_y_continuous(labels = scales::dollar) + # Change the y-axis. \n  # Again, we have to adjust it for euro values\n  scale_y_continuous(labels = scales::dollar_format(big.mark = \".\", \n                                                    decimal.mark = \",\", \n                                                    prefix = \"\", \n                                                    suffix = \" €\")) +\n  \n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  \n  labs(\n    title    = \"Revenue by state\",\n    x = \"\", # Override defaults for x and y\n    y = \"Revenue\"\n  )\n\n\n\n\n\n\n# 6.2 Sales by Year and State ----\n\n# Step 1 - Manipulate\nsales_by_year_state_tbl <- bike_orderlines_wrangled_tbl %>%\n  \n  # Select columns and add a year\n  select(order_date, total_price, state) %>%\n  mutate(year = year(order_date)) %>%\n  \n  # Group by and summarize year and state\n  group_by(year, state) %>%\n  summarise(sales = sum(total_price)) %>%\n  ungroup() %>%\n  \n  # Format $ Text\n  mutate(sales_text = scales::dollar(sales, big.mark = \".\", \n                                     decimal.mark = \",\", \n                                     prefix = \"\", \n                                     suffix = \" €\"))\n\n#> `summarise()` has grouped output by 'year'. You can override using the\n#> `.groups` argument.\n\n# Step 2 - Visualize\nsales_by_year_state_tbl %>%\n  \n  # Set up x, y, fill\n  ggplot(aes(x = year, y = sales, fill = state)) +\n  \n  # Geometries\n  geom_col() + # Run up to here to get a stacked bar plot\n  geom_smooth(method = \"lm\", se = FALSE) + # Adding a trendline\n  \n  # Facet\n  facet_wrap(~ state) +\n  \n  # Formatting\n  scale_y_continuous(labels = scales::dollar_format(big.mark = \".\", \n                                                    decimal.mark = \",\", \n                                                    prefix = \"\", \n                                                    suffix = \" €\")) +\n  \n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  \n  labs(\n    title = \"Revenue by year and main category\",\n    fill = \"Main category\" # Changes the legend name\n  )\n\n#> `geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "content/01_journal/01_tidyverse_example.html",
    "href": "content/01_journal/01_tidyverse_example.html",
    "title": "Tidyverse",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh.\nThis is a .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "content/01_journal/01_tidyverse_example.html#header-2",
    "href": "content/01_journal/01_tidyverse_example.html#header-2",
    "title": "Tidyverse",
    "section": "\n2.1 Header 2",
    "text": "2.1 Header 2\nHeader 3\nHeader 4\nHeader 5\nHeader 6"
  },
  {
    "objectID": "content/02_notes/05_class_notes.html",
    "href": "content/02_notes/05_class_notes.html",
    "title": "Class Notes",
    "section": "",
    "text": "IMPORTANT: You can delete everything in here and start fresh. You might want to start by not deleting anything above this line until you know what that stuff is doing.\nThis is an .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header."
  },
  {
    "objectID": "content/03_other/06_links.html",
    "href": "content/03_other/06_links.html",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual .\n\n\n\n\nGoogle is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My Lab Journal",
    "section": "",
    "text": "This is the lab journal of Andreas Jessen. The scripts and results of the challenges are found under “Journal”."
  }
]